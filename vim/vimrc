" Author: Zachary Snow <zach@zachjs.com>

set nocompatible " no vi-compatibility (should be early in .vimrc)

" install vim-plug if it isn't already
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Plugins
call plug#begin()
Plug 'elzr/vim-json'
Plug 'itchyny/lightline.vim'
Plug 'NLKNguyen/papercolor-theme'
Plug 'Valloric/YouCompleteMe'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'tpope/vim-sleuth'
Plug 'christoomey/vim-tmux-navigator'
Plug 'psf/black', { 'tag': '19.10b0' }
Plug 'rhysd/vim-clang-format'
call plug#end()

" Theme
set background=dark
colorscheme PaperColor

" Display
set number          " turn on absolute line numbering
set relativenumber  " turn on relative line numbering
set noshowmode      " vim-airline already shows the mode
set showmatch       " highlight matching braces
set title           " set window title to file
set equalalways     " split windows equal size
set laststatus=2    " make room for powerline-style plugins
set nofoldenable    " no code folding

" Navigation
set nostartofline   " vertical movement preserves horizontal position
set scrolloff=5     " min screen lines to keep above and below the cursor
set backspace=indent,eol,start " 'better' backspacing, for unknown reasons
set wildmode=longest,list " more Unix-like tab completion

" Indentation
set tabstop=4       " tabs display as 4 spaces
set expandtab       " tab key produces spaces
set softtabstop=4   " number of spaces to produce on <Tab>
set shiftwidth=4    " number of spaces to use for each step of (auto)indent
set autoindent      " auto-indent new lines

" Line wrapping
set wrap            " visually wrap lines
set linebreak       " wrap long lines on good characters
set textwidth=80    " max width of text that is being inserted
set nojoinspaces    " join won't put two spaces after sentence punctuation
set formatoptions=croq " enable comment line auto formatting

" Buffer searching
set incsearch       " move the cursor to the matched string
set hlsearch        " highlight on search
set ignorecase      " search ignoring case
set smartcase       " override ignore case when term has capitalization

" Other
set encoding=utf-8  " UTF-8 character encoding
set lazyredraw      " don't redraw while running macros
set ttimeoutlen=0   " no delay for key codes
set regexpengine=1  " old engine has better syntax perf on newer versions
set pastetoggle=<F2> " F2 toggles paste mode on/off
set clipboard=unnamed " copy/paste from system clipboard

" ctrl+t inserts a literal tab character
imap <C-T> <C-V><Tab>

" underline misspelled words (helpful given my colorblindness)
highlight SpellBad cterm=underline

" strip all trailing whitespace on write
autocmd BufWritePre * let w:wv = winsaveview() | :keeppatterns %s/\s\+$//e | call winrestview(w:wv)

" jump to the last position when reopening a file
autocmd BufReadPost * if line("'\"") <= line("$") | exe "normal! g'\"" | endif

" turn on spell checking when editing commit messages
autocmd FileType gitcommit setlocal spell

" use comma as leader key
let mapleader = ","

" shortcut to format cpp or python files
autocmd FileType cpp nnoremap <buffer> <Leader>f :ClangFormat<CR>
autocmd FileType python nnoremap <buffer> <Leader>f :Black<CR>

" disable smartcase in command mode
autocmd CmdLineEnter : set nosmartcase
autocmd CmdLineLeave : set smartcase

" disable annoying automatic checktime
autocmd FileChangedShell * echon ""

" Search for selected text.
" http://vim.wikia.com/wiki/VimTip171
let s:save_cpo = &cpo | set cpo&vim
if !exists('g:VeryLiteral')
  let g:VeryLiteral = 0
endif
function! s:VSetSearch(cmd)
  let old_reg = getreg('"')
  let old_regtype = getregtype('"')
  normal! gvy
  if @@ =~? '^[0-9a-z,_]*$' || @@ =~? '^[0-9a-z ,_]*$' && g:VeryLiteral
    let @/ = @@
  else
    let pat = escape(@@, a:cmd.'\')
    if g:VeryLiteral
      let pat = substitute(pat, '\n', '\\n', 'g')
    else
      let pat = substitute(pat, '^\_s\+', '\\s\\+', '')
      let pat = substitute(pat, '\_s\+$', '\\s\\*', '')
      let pat = substitute(pat, '\_s\+', '\\_s\\+', 'g')
    endif
    let @/ = '\V'.pat
  endif
  normal! gV
  call setreg('"', old_reg, old_regtype)
endfunction
vnoremap <silent> * :<C-U>call <SID>VSetSearch('/')<CR>/<C-R>/<CR>
vnoremap <silent> # :<C-U>call <SID>VSetSearch('?')<CR>?<C-R>/<CR>
vmap <kMultiply> *
nmap <silent> <Plug>VLToggle :let g:VeryLiteral = !g:VeryLiteral
  \\| echo "VeryLiteral " . (g:VeryLiteral ? "On" : "Off")<CR>
if !hasmapto("<Plug>VLToggle")
  nmap <unique> <Leader>vl <Plug>VLToggle
endif
let &cpo = s:save_cpo | unlet s:save_cpo
